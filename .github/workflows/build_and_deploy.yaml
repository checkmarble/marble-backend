name: Deploy cloud run

on:
  push:
    branches:
      - master
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: ./go.mod

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...

  build_and_deploy:
    needs: build_and_test
    name: Cloud Run Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Set shared env variables
        id: get_env
        run: |
          if [ ${{ github.ref_name }} == 'master' ]
          then 
            echo "staging env"
            echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID_STAGING }}" >> $GITHUB_OUTPUT
            echo "ENV=staging" >> $GITHUB_OUTPUT
            echo "DB_INSTANCE_NAME=${{ vars.DB_INSTANCE_NAME_STAGING }}" >> $GITHUB_OUTPUT
            echo "DB_INSTANCE_REGION=${{ vars.DB_INSTANCE_REGION_STAGING }}" >> $GITHUB_OUTPUT
          fi
          if [ ${{ github.ref_type }} == 'tag' ]
          then 
            echo "production env"
            echo "GCP_PROJECT_ID=${{ vars.GCP_PROJECT_ID_PRODUCTION }}" >> $GITHUB_OUTPUT
            echo "ENV=production" >> $GITHUB_OUTPUT
            echo "DB_INSTANCE_NAME=${{ vars.DB_INSTANCE_NAME_PRODUCTION }}" >> $GITHUB_OUTPUT
            echo "DB_INSTANCE_REGION=${{ vars.DB_INSTANCE_REGION_PRODUCTION }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@master

      - name: Auth
        uses: "google-github-actions/auth@v1"
        if: ${{ github.ref_name == 'master' }}
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY_STAGING }}"

      - name: Auth if prod
        uses: "google-github-actions/auth@v1"
        if: ${{ github.ref_type == 'tag' }}
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY_PRODUCTION }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          install_components: beta

      - name: Configure Docker
        run: |
          gcloud auth configure-docker europe-docker.pkg.dev

      - name: Build
        run: |
          docker build -t europe-docker.pkg.dev/${{ steps.get_env.outputs.GCP_PROJECT_ID }}/marble/marble-backend:latest .

      - name: Push
        run: |
          docker push europe-docker.pkg.dev/${{ steps.get_env.outputs.GCP_PROJECT_ID }}/marble/marble-backend:latest

      - name: Deploy migration job
        run: |
          gcloud beta run jobs deploy marble-backend-db-migrations \
            --quiet \
            --image="europe-docker.pkg.dev/${{ steps.get_env.outputs.GCP_PROJECT_ID }}/marble/marble-backend:latest" \
            --region="europe-west1" \
            --args=-migrations \
            --service-account=marble-backend-cloud-run@${{ steps.get_env.outputs.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars=PG_HOSTNAME=/cloudsql/${{ steps.get_env.outputs.GCP_PROJECT_ID }}:${{ steps.get_env.outputs.DB_INSTANCE_REGION }}:${{ steps.get_env.outputs.DB_INSTANCE_NAME }},PG_USER=postgres,GOOGLE_CLOUD_PROJECT=${{ steps.get_env.outputs.GCP_PROJECT_ID }},ENV=${{ steps.get_env.outputs.ENV }} \
            --set-secrets=PG_PASSWORD=POSTGRES_PASSWORD:latest \
            --set-cloudsql-instances=${{ steps.get_env.outputs.GCP_PROJECT_ID }}:${{ steps.get_env.outputs.DB_INSTANCE_REGION }}:${{ steps.get_env.outputs.DB_INSTANCE_NAME }} \
            --execute-now \
            --wait

      - name: Deploy server
        run: |
          gcloud run deploy marble-backend \
            --quiet \
            --image="europe-docker.pkg.dev/${{ steps.get_env.outputs.GCP_PROJECT_ID }}/marble/marble-backend:latest" \
            --region="europe-west1" \
            --args=-server \
            --allow-unauthenticated \
            --service-account=marble-backend-cloud-run@${{ steps.get_env.outputs.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars=PG_HOSTNAME=/cloudsql/${{ steps.get_env.outputs.GCP_PROJECT_ID }}:${{ steps.get_env.outputs.DB_INSTANCE_REGION }}:${{ steps.get_env.outputs.DB_INSTANCE_NAME }},PG_USER=postgres,GOOGLE_CLOUD_PROJECT=${{ steps.get_env.outputs.GCP_PROJECT_ID }},ENV=${{ steps.get_env.outputs.ENV }},AWS_REGION=eu-west-3 \
            --set-secrets=PG_PASSWORD=POSTGRES_PASSWORD:latest,AUTHENTICATION_JWT_SIGNING_KEY=AUTHENTICATION_JWT_SIGNING_KEY:latest,AWS_ACCESS_KEY=AWS_ACCESS_KEY:latest,AWS_SECRET_KEY=AWS_SECRET_KEY:latest \
            --set-cloudsql-instances=${{ steps.get_env.outputs.GCP_PROJECT_ID }}:${{ steps.get_env.outputs.DB_INSTANCE_REGION }}:${{ steps.get_env.outputs.DB_INSTANCE_NAME }} \
            --port=8080

      - name: Deploy scheduler job
        run: |
          gcloud beta run jobs deploy marble-backend-scheduler \
            --quiet \
            --image="europe-docker.pkg.dev/${{ steps.get_env.outputs.GCP_PROJECT_ID }}/marble/marble-backend:latest" \
            --region="europe-west1" \
            --args=-scheduler \
            --service-account=marble-backend-cloud-run@${{ steps.get_env.outputs.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --set-env-vars=PG_HOSTNAME=/cloudsql/${{ steps.get_env.outputs.GCP_PROJECT_ID }}:${{ steps.get_env.outputs.DB_INSTANCE_REGION }}:${{ steps.get_env.outputs.DB_INSTANCE_NAME }},PG_USER=postgres,GOOGLE_CLOUD_PROJECT=${{ steps.get_env.outputs.GCP_PROJECT_ID }},ENV=${{ steps.get_env.outputs.ENV }},AWS_REGION=eu-west-3 \
            --set-secrets=PG_PASSWORD=POSTGRES_PASSWORD:latest,AWS_ACCESS_KEY=AWS_ACCESS_KEY:latest,AWS_SECRET_KEY=AWS_SECRET_KEY:latest \
            --set-cloudsql-instances=${{ steps.get_env.outputs.GCP_PROJECT_ID }}:${{ steps.get_env.outputs.DB_INSTANCE_REGION }}:${{ steps.get_env.outputs.DB_INSTANCE_NAME }}
