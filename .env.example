#
# REQUIRED SETTINGS
#

# MUST be set to 'production' when not testing. In which case HTTPS will be assumed.
ENV=development
PORT=8080

# Set this to the full url used by your users to access Marble's frontend
MARBLE_APP_URL=http://localhost:3000
MARBLE_BACKOFFICE_URL=http://localhost:3003

# Set your license key here if you have one in order to access premium features.
LICENSE_KEY=

# RSA private key, in PEM format, used for for signing authentication tokens. MUST be changed for production.
# We recommend using AUTHENTICATION_JWT_SIGNING_KEY_FILE to point to a private key on disk.
# To generate a private key, use `openssl genrsa -out /path/to/private/key.pem 4096`.
# AUTHENTICATION_JWT_SIGNING_KEY="-----BEGIN RSA PRIVATE KEY-----...-----END RSA PRIVATE KEY-----"
# AUTHENTICATION_JWT_SIGNING_KEY_FILE="/path/to/private/key.pem"
AUTHENTICATION_JWT_SIGNING_KEY_FILE=".jwt-key.example.pem"

# Configure your PostgreSQL database connection information, either by providing a DSN using this form:
# PG_CONNECTION_STRING='postgres://postgres:marble@localhost:5432/marble?sslmode=prefer'

# Or by setting each piece of information in those variables:
PG_HOSTNAME=localhost
PG_PORT=5432
PG_USER=postgres
PG_PASSWORD=marble
PG_DATABASE=marble
# For production, this SHOULD be set to 'require'
PG_SSL_MODE=prefer

# Change the three settings below to create your initial organization and users.
# The user must also have a matching account in the authentication store used (in Firebase, for example).
# Subsequent users will be able to be created from the application.
CREATE_ORG_NAME=Zorg
CREATE_ORG_ADMIN_EMAIL=jbe@zorg.com

# Configure the ID of your Firebase project for authentication and the path to the service account's JSON private key file.
#  - The 'Project ID' can be found in the 'General' section of your Firebase project's settings page.
#  - The private key must be generated in the 'Service accounts' tab by clicking 'Generate new private key'
# If using the Firebase emulator, this should match the emulator's project ID. In a real deployment, it should be auto-detected from your credentials.
# GOOGLE_CLOUD_PROJECT=test-project
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service/account/private/key.json

# Configure the document blob storage backend.
# The example values MUST be changed for anything but a local test environment since the file provider does not support all features.
#
# Several blob storage implementations are supported:
#  - 'file://{path}?create_dir=true' (see https://pkg.go.dev/gocloud.dev/blob/fileblob#URLOpener)
#  - 'gs://{bucket_name}' for Google Cloud Storage
#  - 's3://{bucket_name}' for AWS S3 or any S3-compatible platform (Minio, ...)
#  - 'azblob://{bucket_name}' for Azure Blob Storage
#
# Depending on the used cloud provider, the idiomatic way to discover credentials will be used, such as:
#  - GOOGLE_APPLICATION_CREDENTIALS or Application Default Credentials for Google Cloud Platform
#  - AWS_DEFAULT_REGION, AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY or default profile for Amazon Web Services
#  - AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_KEY or equivalent for Azure
#
# If you are using Minio, you should use the S3 provider with some options set, depending on your setup, for example:
#  - s3://marble?awssdk=v1&endpoint=https://minio.local&s3ForcePathStyle=true
# When testing Marble, you can add the 'requireSSL=false' query parameter to connect in cleartext.
#
# See https://gocloud.dev/howto/blob/ for more details.
INGESTION_BUCKET_URL="file://./tempFiles/data-ingestion-bucket?create_dir=true"
CASE_MANAGER_BUCKET_URL="file://./tempFiles/case-manager-bucket?create_dir=true"
TRANSFER_CHECK_ENRICHMENT_BUCKET_URL="file://./tempFiles/transfercheck-bucket?create_dir=true"

# Configure the connection details to your Metabase instance.
#  - To retrieve the JWT signing key, go to your Metabase admin panel, in 'Settings', then 'Embedding', and click 'Manage' under 'Static embedding'
METABASE_SITE_URL=
METABASE_JWT_SIGNING_KEY=
METABASE_GLOBAL_DASHBOARD_ID=

# Set up connection details to Convoy to enable webhooks sending.
# You can get your project ID and API key from your project settings page in Convoy's dashboard, in the "Secrets" section.
CONVOY_API_URL= 
CONVOY_API_KEY=
CONVOY_PROJECT_ID=

# Configure access to the Open Sanctions API to use sanction checks
#
# If you use the SaaS Open Sanctions API, only uncomment OPENSANCTIONS_API_KEY and provide its values.
# If you self-host the API, uncomment all relevant settings to point to your deployment and configure authentication.
#  - OPENSANCTIONS_AUTH_METHOD supports 'bearer' and 'basic'
#    If basic, provide the username and password in the form of 'user:password'
# OPENSANCTIONS_API_HOST=http://self.hosted.local
# OPENSANCTIONS_AUTH_METHOD=bearer
# OPENSANCTIONS_API_KEY=

#
# TUNING
#

# 'liveness' to only log health check probes
REQUEST_LOGGING_LEVEL=all
# 'text', 'json' or 'gcp'
LOGGING_FORMAT=text
# 'info' or 'debug'
# LOG_LEVEL=info

# You can customize the default timeout durations by uncommenting the following settings. Provided values are defaults.
# BATCH_TIMEOUT_SECOND=55
# DECISION_TIMEOUT_SECOND=10
# DEFAULT_TIMEOUT_SECOND=5

#
# OPTIONAL SETTINGS
#

# Uncomment this line if you are using the Firebase emulator for testing.
# FIREBASE_AUTH_EMULATOR_HOST="localhost:9099"

# Set your Firebase settings as described in your app
FIREBASE_API_KEY=dummy
# For SSO, if your auth domain is different from <project_id>.firebaseapp.com, define it here.
# FIREBASE_AUTH_DOMAIN=
# If your Firebase project differs from the global Google Cloud project you use, you can set it here.
# FIREBASE_PROJECT_ID=test-project

# If running the worker process in an environment requiring all processes to respond on an HTTP port, uncomment this setting.
# For example, Cloud Run requires all services to process liveness checks to keep running.
# CLOUD_RUN_PROBE_PORT=9000

# Configure various external integrations.
# Send traces to Google Cloud Platform (see https://cloud.google.com/trace/docs/setup/go-ot). Requires Application Default Credentials.
ENABLE_GCP_TRACING=false 
SEGMENT_WRITE_KEY=
DISABLE_SEGMENT=false
SENTRY_DSN=

# Abort and exit if license cannot be validated.
KILL_IF_READ_LICENSE_ERROR=false
