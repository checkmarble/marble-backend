// Code generated by MockGen. DO NOT EDIT.
// Source: marble/marble-backend/repositories (interfaces: CustomListRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "marble/marble-backend/models"
	repositories "marble/marble-backend/repositories"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomListRepository is a mock of CustomListRepository interface.
type MockCustomListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomListRepositoryMockRecorder
}

// MockCustomListRepositoryMockRecorder is the mock recorder for MockCustomListRepository.
type MockCustomListRepositoryMockRecorder struct {
	mock *MockCustomListRepository
}

// NewMockCustomListRepository creates a new mock instance.
func NewMockCustomListRepository(ctrl *gomock.Controller) *MockCustomListRepository {
	mock := &MockCustomListRepository{ctrl: ctrl}
	mock.recorder = &MockCustomListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomListRepository) EXPECT() *MockCustomListRepositoryMockRecorder {
	return m.recorder
}

// AddCustomListValue mocks base method.
func (m *MockCustomListRepository) AddCustomListValue(arg0 repositories.Transaction, arg1 models.AddCustomListValueInput, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomListValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCustomListValue indicates an expected call of AddCustomListValue.
func (mr *MockCustomListRepositoryMockRecorder) AddCustomListValue(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomListValue", reflect.TypeOf((*MockCustomListRepository)(nil).AddCustomListValue), arg0, arg1, arg2)
}

// AllCustomLists mocks base method.
func (m *MockCustomListRepository) AllCustomLists(arg0 repositories.Transaction, arg1 string) ([]models.CustomList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllCustomLists", arg0, arg1)
	ret0, _ := ret[0].([]models.CustomList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllCustomLists indicates an expected call of AllCustomLists.
func (mr *MockCustomListRepositoryMockRecorder) AllCustomLists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllCustomLists", reflect.TypeOf((*MockCustomListRepository)(nil).AllCustomLists), arg0, arg1)
}

// CreateCustomList mocks base method.
func (m *MockCustomListRepository) CreateCustomList(arg0 repositories.Transaction, arg1 models.CreateCustomListInput, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomList indicates an expected call of CreateCustomList.
func (mr *MockCustomListRepositoryMockRecorder) CreateCustomList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomList", reflect.TypeOf((*MockCustomListRepository)(nil).CreateCustomList), arg0, arg1, arg2)
}

// DeleteCustomListValue mocks base method.
func (m *MockCustomListRepository) DeleteCustomListValue(arg0 repositories.Transaction, arg1 models.DeleteCustomListValueInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCustomListValue", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCustomListValue indicates an expected call of DeleteCustomListValue.
func (mr *MockCustomListRepositoryMockRecorder) DeleteCustomListValue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomListValue", reflect.TypeOf((*MockCustomListRepository)(nil).DeleteCustomListValue), arg0, arg1)
}

// GetCustomListById mocks base method.
func (m *MockCustomListRepository) GetCustomListById(arg0 repositories.Transaction, arg1 string) (models.CustomList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomListById", arg0, arg1)
	ret0, _ := ret[0].(models.CustomList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomListById indicates an expected call of GetCustomListById.
func (mr *MockCustomListRepositoryMockRecorder) GetCustomListById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomListById", reflect.TypeOf((*MockCustomListRepository)(nil).GetCustomListById), arg0, arg1)
}

// GetCustomListValueById mocks base method.
func (m *MockCustomListRepository) GetCustomListValueById(arg0 repositories.Transaction, arg1 string) (models.CustomListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomListValueById", arg0, arg1)
	ret0, _ := ret[0].(models.CustomListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomListValueById indicates an expected call of GetCustomListValueById.
func (mr *MockCustomListRepositoryMockRecorder) GetCustomListValueById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomListValueById", reflect.TypeOf((*MockCustomListRepository)(nil).GetCustomListValueById), arg0, arg1)
}

// GetCustomListValues mocks base method.
func (m *MockCustomListRepository) GetCustomListValues(arg0 repositories.Transaction, arg1 models.GetCustomListValuesInput) ([]models.CustomListValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomListValues", arg0, arg1)
	ret0, _ := ret[0].([]models.CustomListValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomListValues indicates an expected call of GetCustomListValues.
func (mr *MockCustomListRepositoryMockRecorder) GetCustomListValues(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomListValues", reflect.TypeOf((*MockCustomListRepository)(nil).GetCustomListValues), arg0, arg1)
}

// SoftDeleteCustomList mocks base method.
func (m *MockCustomListRepository) SoftDeleteCustomList(arg0 repositories.Transaction, arg1 models.DeleteCustomListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDeleteCustomList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDeleteCustomList indicates an expected call of SoftDeleteCustomList.
func (mr *MockCustomListRepositoryMockRecorder) SoftDeleteCustomList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDeleteCustomList", reflect.TypeOf((*MockCustomListRepository)(nil).SoftDeleteCustomList), arg0, arg1)
}

// UpdateCustomList mocks base method.
func (m *MockCustomListRepository) UpdateCustomList(arg0 repositories.Transaction, arg1 models.UpdateCustomListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustomList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustomList indicates an expected call of UpdateCustomList.
func (mr *MockCustomListRepositoryMockRecorder) UpdateCustomList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustomList", reflect.TypeOf((*MockCustomListRepository)(nil).UpdateCustomList), arg0, arg1)
}
